#!/usr/bin/python
import sys, time, array
import pygtk
pygtk.require("2.0")
import gtk, gobject
from snes import core
from snes.util import snes_framebuffer_to_RGBX8888

game_path = sys.argv[1]

with open(game_path, "rb") as handle:
	core.load_cartridge_normal(handle.read())

window = gtk.Window(gtk.WINDOW_TOPLEVEL)
vbox = gtk.VBox()
canvas = gtk.DrawingArea()

window.set_title("libsnes/Python")

window.add(vbox)
vbox.show()

canvas.set_size_request(256, 224)
vbox.pack_start(canvas)
canvas.show()
window.show()

drawable = canvas.window
gc = canvas.get_style().fg_gc[gtk.STATE_NORMAL]

framecount = 0.0
start = time.clock()

def paint_frame(data, width, height, hires, interlace, overscan, pitch):
	global framecount, start

	now = time.clock()
	if now > start + 1:
		fps = framecount / (now - start)
		sys.stdout.write("FPS: %0.1f\r" % fps)
		sys.stdout.flush()
		framecount = 0
		start = now

	drawable.draw_rgb_32_image(gc, 0,0, width, height, gtk.gdk.RGB_DITHER_NONE,
			snes_framebuffer_to_RGBX8888(data, width, height, pitch), -1)

	framecount += 1


core.set_video_refresh_cb(paint_frame)

timeout_handle = gobject.timeout_add(1, lambda: core.run() or True)

def shutdown(widget, data=None):
	gobject.source_remove(timeout_handle)
	gtk.main_quit()

window.connect("destroy", shutdown)

gtk.main()
