#!/usr/bin/python
import sys, time
import OpenGL
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
from OpenGL.GL import shaders
from snes import core as C
from snes.video import gl_output, scaling

class GLUTDemo(object):

	def __init__(self, argv, core):
		self.core = core

		self.window = None
		self.textureID = None
		self.windowW = None
		self.windowH = None
		self.frameW = None
		self.frameH = None
		self.textureW = None
		self.textureH = None

		self.start = None
		self.framecount = 0

		self.programSource = None
		self.program = None
		self.uniformLocations = {}

		argv = glutInit(argv)
		if 2 <= len(argv) <= 3:
			handle = open(argv[1], "rb")
			core.load_cartridge_normal(handle.read())
			handle.close()

			if len(argv) == 3:
				self.programSource = gl_output.load_shader_elem(argv[2])

		else:
			print "Usage: %s <cartname> [<shadername>]" % (sys.argv[0],)
			sys.exit(1)

	def _setUniform(self, name, x, y):
		loc = glGetUniformLocation(self.program, name)

		if loc < 0:
			return

		glUniform2f(loc, x, y)

	def run(self):

		glutInitDisplayMode(GLUT_RGBA)

		glutInitWindowSize(scaling.SNES_WIDTH, scaling.SNES_HEIGHT)
		self.window = glutCreateWindow("libsnes/python")

		glutDisplayFunc(self._draw_scene)
		glutIdleFunc(self._handle_idle)
		glutReshapeFunc(self._handle_resize)
		glutKeyboardFunc(self._handle_key)

		glClearColor(0.0, 0.0, 0.0, 0.0)
		glEnable(GL_TEXTURE_2D)

		gl_output.set_video_refresh_cb(core, self._store_frame)

		if self.programSource is not None:
			try:
				self.program = gl_output.compile_shader_elem(
						self.programSource)
			except RuntimeError, e:
				print >> sys.stderr, e.args[0]
				sys.exit(1)

		self.start = time.clock()
		glutMainLoop()

	def _store_frame(self, textureID, frameW, frameH, textureW, textureH):
		self.textureID = textureID
		self.frameW = frameW
		self.frameH = frameH
		self.textureW = textureW
		self.textureH = textureH

	def _draw_scene(self):
		# Clear The Screen
		glClear(GL_COLOR_BUFFER_BIT)
		glLoadIdentity()					# Reset The View

		if None in (self.textureID, self.textureW, self.textureH):
			return

		imageW, imageH = scaling.scale_raw(self.windowW, self.windowH,
				self.frameW, self.frameH, True)

		imageX = (self.windowW - imageW) / 2
		imageY = (self.windowH - imageH) / 2

		if self.program is not None:
			# If we have a shader program, use it.
			glUseProgram(self.program)
			self._setUniform('rubyInputSize', self.frameW, self.frameH)
			self._setUniform('rubyOutputSize', imageW, imageH)
			self._setUniform('rubyTextureSize', self.textureW, self.textureH)

		# Load our texture
		glBindTexture(GL_TEXTURE_2D, self.textureID)

		glTexParameter(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
		glTexParameter(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER)
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER)

		glBegin(GL_QUADS)                   # Start drawing a 4 sided polygon

		# OpenGL uses texture-coordinates between 0.0 and 1.0, rather than
		# integer texels.
		txW = float(self.frameW) / self.textureW
		txH = float(self.frameH) / self.textureH

		glTexCoord2f(0,   0  ); glVertex3f(imageX,        imageY,        0.0)
		glTexCoord2f(txW, 0  ); glVertex3f(imageX+imageW, imageY,        0.0)
		glTexCoord2f(txW, txH); glVertex3f(imageX+imageW, imageY+imageH, 0.0)
		glTexCoord2f(0,   txH); glVertex3f(imageX,        imageY+imageH, 0.0)

		glEnd()                             # We are done with the polygon

		glFlush()

		if self.program is not None:
			# If we used a shader program, turn it off again so we don't screw
			# up anything else.
			glUseProgram(0)

	def _handle_key(self, key, x, y):
		if key == '\x1b': # Escape
			sys.exit(0)

	def _handle_resize(self, width, height):
		self.windowW = width
		self.windowH = height
		if width < 1:
			width = 1
		if height < 1:
			height = 1

		glViewport(0, 0, width, height)
		glMatrixMode(GL_PROJECTION)
		glLoadIdentity()
		gluOrtho2D(0, width, height, 0)
		glMatrixMode(GL_MODELVIEW)

	def _handle_idle(self):
		now = time.clock()
		if now > self.start + 1:
			fps = self.framecount / (now - self.start)
			sys.stdout.write("FPS: %0.1f\r" % fps)
			sys.stdout.flush()
			self.framecount = 0
			self.start = now

		self.core.run()
		glutPostWindowRedisplay(self.window)
		self.framecount += 1



core = None
for libname in C.guess_library_name():
	try:
		core = C.EmulatedSNES(libname)
	except OSError:
		# Library not found
		pass

demo = GLUTDemo(sys.argv, core)
demo.run()
